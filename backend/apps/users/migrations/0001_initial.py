# Generated by Django 5.1.3 on 2025-11-01 02:27

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('departments', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('employee', 'Empleado'), ('supervisor', 'Supervisor'), ('admin', 'Administrador')], db_index=True, default='employee', max_length=20, verbose_name='Rol')),
                ('notifications_enabled', models.BooleanField(default=True, verbose_name='Notificaciones Habilitadas')),
                ('fatigue_alerts_enabled', models.BooleanField(default=True, verbose_name='Alertas de Fatiga Habilitadas')),
                ('ai_recommendations_enabled', models.BooleanField(default=True, verbose_name='Recomendaciones IA Habilitadas')),
                ('sync_enabled', models.BooleanField(default=True, verbose_name='Sincronización Habilitada')),
                ('fcm_token', models.TextField(blank=True, help_text='Token de Firebase Cloud Messaging para notificaciones push', null=True, verbose_name='FCM Token')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última Actualización')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('employee_id', models.CharField(editable=False, help_text='Identificador único auto-generado del empleado', max_length=20, primary_key=True, serialize=False, unique=True, verbose_name='ID de Empleado')),
                ('name', models.CharField(max_length=100, verbose_name='Nombre(s)')),
                ('last_name', models.CharField(max_length=100, verbose_name='Apellidos')),
                ('employee_number', models.CharField(blank=True, help_text='Número de nómina o identificador adicional', max_length=50, null=True, unique=True, verbose_name='Número de Empleado')),
                ('location', models.CharField(blank=True, max_length=100, null=True, verbose_name='Ubicación')),
                ('hire_date', models.DateField(blank=True, null=True, verbose_name='Fecha de Ingreso')),
                ('is_active', models.BooleanField(default=True, verbose_name='Activo')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última Actualización')),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='employees', to='departments.department', verbose_name='Departamento')),
                ('user', models.OneToOneField(help_text='Usuario asociado (debe tener rol employee)', limit_choices_to={'role': 'employee'}, on_delete=django.db.models.deletion.CASCADE, related_name='employee_profile', to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Empleado',
                'verbose_name_plural': 'Empleados',
                'ordering': ['last_name', 'name'],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['role'], name='users_user_role_36d76d_idx'),
        ),
        migrations.AddIndex(
            model_name='employee',
            index=models.Index(fields=['employee_number'], name='users_emplo_employe_3cbf27_idx'),
        ),
        migrations.AddIndex(
            model_name='employee',
            index=models.Index(fields=['department'], name='users_emplo_departm_fd9306_idx'),
        ),
    ]
